plugins {
    id "antlr"
    id "application"
    id "eclipse"
    id "idea"
    id "java"
    
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

project.version = '0.1.0-SNAPSHOT'
project.group = 'de.hhu.stups'

repositories {
    mavenCentral()
    maven {
        name "snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

// Prevent the full ANTLR tool (not just the runtime) being declared as a runtime dependency of our code.
// Workaround for https://github.com/gradle/gradle/issues/820
configurations {
    api {
        extendsFrom = extendsFrom.findAll {it != antlr}
    }
}

dependencies {
    def antlrVersion = "4.9.3"

    antlr group: "org.antlr", name: "antlr4", version: antlrVersion
    api group: "org.antlr", name: "antlr4-runtime", version: antlrVersion

    testImplementation 'junit:junit:4.13.2'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
}

// gradle generateGrammarSource
generateGrammarSource {
    arguments += ["-visitor", "-long-messages"]
    outputDirectory = file('build/generated-src/antlr/main/files')
}

compileJava {
    dependsOn = ['generateGrammarSource']
}

def readCurrentGitCommit() {
    def proc = ["git", "rev-parse", "HEAD"].execute(null, project.projectDir)
    def exitCode = proc.waitFor()
    if (exitCode != 0) {
        throw new IllegalStateException("git rev-parse command exited with status code ${exitCode}:\n" + proc.err.readLines().join("\n"))
    }
    return proc.in.readLines()[0]
}

final currentGitCommit = readCurrentGitCommit()
processResources {
    inputs.property("project.version", project.version)
    inputs.property("currentGitCommit", currentGitCommit)
    filesMatching("de/prob/parser/antlr/build.properties") {
        expand(version: project.version, git: currentGitCommit)
    }
}

sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs) // What does this do?

tasks.withType(JavaExec) {
    if(project.hasProperty('file')) {
        if (project.hasProperty('typecheck')) {
            args([file, typecheck])
        } else {
            args([file, true])
        }
    }
}

application {
    mainClass = "de.prob.parser.antlr.Antlr4BParser"
}
