apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'

project.version = '0.1.0-SNAPSHOT'
project.group = 'de.hhu.stups'

mainClassName = "de.prob.parser.antlr.Antlr4BParser"

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        name "snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        name "release"
        url "https://oss.sonatype.org/content/repositories/releases/"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    antlr 'org.antlr:antlr4:4.10.1' // use ANTLR version 4
    testImplementation 'junit:junit:4.13.2'
}


sourceSets {
    main {
        java {
          	srcDirs = ['build/temp', 'src/main/java', 'build/generated-src/antlr/main']
        }
    }
}


def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    try {
        def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
        def isCommit = head.length == 1 // detached head mode?
        if (isCommit) return head[0].trim() // head contains only commit id
        def refHead = new File(gitFolder + head[1].trim()) // look up ref: .git/refs/heads/master
        refHead.text.trim() 
    } catch (Exception e) { "unknown" }
}

task createBuildConstants  {
    doFirst {
        def buildconstants_class = """
version=${project.version}
git=${getCheckedOutGitCommitHash()}"""
        File f = file("src/main/resources/build.properties")
        f.delete()
        f.getParentFile().mkdirs()
        f << buildconstants_class
    }
}

task deploy(dependsOn: [build])

// gradle generateGrammarSource
generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]
    outputDirectory = file('build/generated-src/antlr/main/files')
}


jar {
    include '**/*.class'
    include '**/*.java'
    exclude '**.*.scc'
    from 'build/temp'
    include '**/*.dat'
    include '**/*.properties'
    from sourceSets.main.toString()
    include '**/*.java'
}

compileJava {
    dependsOn = ['createBuildConstants','generateGrammarSource']
    doFirst {
   	def buildconstants_class = """CompileDate=${new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()).toString()}"""
   	File f = file("src/main/resources/revision.properties")
        f.delete()
        f <<  buildconstants_class
    }
}

task uberjar(type: Jar, dependsOn: deploy) {
    baseName = 'antlr-parser'
    subprojects.each { subproject ->
        from subproject.configurations.archives.allArtifacts.getFiles().collect { zipTree(it) }
    }
}

wrapper {
    gradleVersion = "7.4.2"
}

sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs) // What does this do?

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    manifest {
        attributes 'Title': 'antlr-parser',
                'Version': project.version,
                'Main-Class': mainClassName
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

tasks.withType(JavaExec) {
    if(project.hasProperty('file')) {
        if (project.hasProperty('typecheck')) {
            args([file, typecheck])
        } else {
            args([file, true])
        }
    }
}
