apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'

project.version = '0.1.0-SNAPSHOT'
project.group = 'de.hhu.stups'

mainClassName = "de.prob.parser.antlr.Antlr4BParser"

repositories {
    mavenCentral()
    maven {
        name "snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    antlr 'org.antlr:antlr4:4.7.1' // use ANTLR version 4
    testImplementation 'junit:junit:4.13.2'
}


sourceSets {
    main {
        java {
          	srcDirs = ['build/temp', 'src/main/java', 'build/generated-src/antlr/main']
        }
    }
}

task deploy(dependsOn: [build])

// gradle generateGrammarSource
generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]
    outputDirectory = file('build/generated-src/antlr/main/files')
}


jar {
    include '**/*.class'
    include '**/*.java'
    exclude '**.*.scc'
    from 'build/temp'
    include '**/*.dat'
    include '**/*.properties'
    from sourceSets.main.toString()
    include '**/*.java'
}

compileJava {
    dependsOn = ['generateGrammarSource']
}

def readCurrentGitCommit() {
    def proc = ["git", "rev-parse", "HEAD"].execute(null, project.projectDir)
    def exitCode = proc.waitFor()
    if (exitCode != 0) {
        throw new IllegalStateException("git rev-parse command exited with status code ${exitCode}:\n" + proc.err.readLines().join("\n"))
    }
    return proc.in.readLines()[0]
}

final currentGitCommit = readCurrentGitCommit()
processResources {
    inputs.property("project.version", project.version)
    inputs.property("currentGitCommit", currentGitCommit)
    filesMatching("de/prob/parser/antlr/build.properties") {
        expand(version: project.version, git: currentGitCommit)
    }
}

task uberjar(type: Jar, dependsOn: deploy) {
    baseName = 'antlr-parser'
    subprojects.each { subproject ->
        from subproject.configurations.archives.allArtifacts.getFiles().collect { zipTree(it) }
    }
}

wrapper {
    gradleVersion = "7.4.2"
}

sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs) // What does this do?

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    manifest {
        attributes 'Title': 'antlr-parser',
                'Version': project.version,
                'Main-Class': mainClassName
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

tasks.withType(JavaExec) {
    if(project.hasProperty('file')) {
        if (project.hasProperty('typecheck')) {
            args([file, typecheck])
        } else {
            args([file, true])
        }
    }
}
