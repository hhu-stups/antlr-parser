plugins {
    id "antlr"
    id "application"
    id "eclipse"
    id "idea"
    id "java"
    id "maven-publish"
    id "signing"
    
    id "com.gradleup.shadow" version "8.3.5"
}

project.version = '0.1.0-SNAPSHOT'
project.group = 'de.hhu.stups'
final isSnapshot = project.version.endsWith("-SNAPSHOT")

repositories {
    mavenCentral()
    if (isSnapshot) {
        maven {
            name = "snapshots"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
}

// Prevent the full ANTLR tool (not just the runtime) being declared as a runtime dependency of our code.
// Workaround for https://github.com/gradle/gradle/issues/820
configurations {
    api {
        extendsFrom = extendsFrom.findAll {it != antlr}
    }
}

dependencies {
    def antlrVersion = "4.9.3"

    antlr group: "org.antlr", name: "antlr4", version: antlrVersion
    api group: "org.antlr", name: "antlr4-runtime", version: antlrVersion

    testImplementation 'junit:junit:4.13.2'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8

    withSourcesJar()
    withJavadocJar()
}

// gradle generateGrammarSource
generateGrammarSource {
    // This combination of "-lib", "-Xexact-output-dir", and outputDirectory is necessary
    // to have both the grammar files and generated sources in the correct package without breaking imports.
    arguments += ["-visitor", "-long-messages", "-package", "files", "-lib", "src/main/antlr/files", "-Xexact-output-dir"]
    outputDirectory = file('build/generated-src/antlr/main/files')
}

// Workaround for Gradle's antlr plugin not adding the necessary dependencies to sourcesJar and javadocJar,
// causing an error with Gradle 8 because of undeclared dependencies.
// See https://github.com/gradle/gradle/issues/19555 and https://github.com/gradle/gradle/issues/25885

sourcesJar {
    dependsOn("generateGrammarSource")
}

javadocJar {
    dependsOn("generateGrammarSource")
}

def readCurrentGitCommit() {
    def proc = ["git", "rev-parse", "HEAD"].execute(null, project.projectDir)
    def exitCode = proc.waitFor()
    if (exitCode != 0) {
        throw new IllegalStateException("git rev-parse command exited with status code ${exitCode}:\n" + proc.err.readLines().join("\n"))
    }
    return proc.in.readLines()[0]
}

final currentGitCommit = readCurrentGitCommit()
processResources {
    inputs.property("project.version", project.version)
    inputs.property("currentGitCommit", currentGitCommit)
    filesMatching("de/prob/parser/antlr/build.properties") {
        expand(version: project.version, git: currentGitCommit)
    }
}

sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs) // What does this do?

tasks.withType(JavaExec) {
    // Shouldn't be needed anymore - please use ./gradlew run --args="..." instead.
    if(project.hasProperty('file')) {
        if (project.hasProperty('typecheck')) {
            args([file, typecheck])
        } else {
            args([file, true])
        }
    }
}

application {
    mainClass = "de.prob.parser.antlr.Antlr4BParser"
}

// Don't publish the shadowJar to Maven Central. Code from:
// https://github.com/johnrengelman/shadow/issues/586#issuecomment-708375599
// https://github.com/johnrengelman/shadow/issues/651#issuecomment-815921124
components.java.withVariantsFromConfiguration(configurations.shadowRuntimeElements) {
    skip()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = "ANTLR B parser" 
                description = "DO NOT USE THIS PLEASE"
                url = "https://github.com/hhu-stups/antlr-parser"

                licenses {
                    license {
                        name = "EPL-1.0"
                        url = "https://www.eclipse.org/org/documents/epl-v10.html"
                    }
                }

                scm {
                    connection = "scm:git:https://github.com/hhu-stups/antlr-parser.git"
                    developerConnection = "scm:git:https://gitlab.cs.uni-duesseldorf.de/stups/prob/antlr_b_parser.git"
                    url = "https://github.com/hhu-stups/antlr-parser"
                }

                developers {
                    developer {
                        id = "vu"
                        name = "Fabian Vu"
                        email = "fabian.vu@hhu.de"
                    }
                }
            }
        }
    }

    repositories {
        maven {
            final releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            final snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
            if (project.hasProperty("ossrhUsername") && project.hasProperty("ossrhPassword")) {
                credentials {
                    username = project.ossrhUsername
                    password = project.ossrhPassword
                }
            }
        }
    }
}

ext."signing.secretKeyRingFile" = rootProject.file("secring.gpg").absolutePath

signing {
    sign publishing.publications.mavenJava
}
